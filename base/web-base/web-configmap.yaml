kind: ConfigMap
apiVersion: v1
metadata:
  namespace: jitsi
  name: web-base
data:
    10-config: |
        #!/usr/bin/with-contenv bash
        # make our folders
        mkdir -p \
            /config/{nginx/site-confs,keys} \
            /run \
            /var/lib/nginx/tmp/client_body \
            /var/tmp/nginx

        # generate keys (maybe)
        if [[ $DISABLE_HTTPS -ne 1 ]]; then
            if [[ $ENABLE_LETSENCRYPT -eq 1 ]]; then
                if [[ ! -f /etc/letsencrypt/live/$LETSENCRYPT_DOMAIN/fullchain.pem ]]; then
                    if ! certbot-auto \
                        certonly \
                        --no-self-upgrade \
                        --noninteractive \
                        --standalone \
                        --preferred-challenges http \
                        -d $LETSENCRYPT_DOMAIN \
                        --agree-tos \
                        --email $LETSENCRYPT_EMAIL ; then

                        echo "Failed to obtain a certificate from the Let's Encrypt CA."
                        # this tries to get the user's attention and to spare the
                        # authority's rate limit:
                        sleep 15
                        echo "Exiting."
                        exit 1
                    fi
                fi

                # remove default certbot renewal
                if [[ -f /etc/cron.d/certbot ]]; then
                    rm /etc/cron.d/certbot
                fi

                # setup certbot renewal script
                if [[ ! -f /etc/cron.daily/letencrypt-renew ]]; then
                    cp /defaults/letsencrypt-renew /etc/cron.daily/
                fi
            else
                # use self-signed certs
                if [[ -f /config/keys/cert.key && -f /config/keys/cert.crt ]]; then
                    echo "using keys found in /config/keys"
                else
                    echo "generating self-signed keys in /config/keys, you can replace these with your own keys if required"
                    SUBJECT="/C=US/ST=TX/L=Austin/O=jitsi.org/OU=Jitsi Server/CN=*"
                    openssl req -new -x509 -days 3650 -nodes -out /config/keys/cert.crt -keyout /config/keys/cert.key -subj "$SUBJECT"
                fi
            fi
        fi

        # copy config files
        tpl /defaults/nginx.conf > /config/nginx/nginx.conf
        
        if [[ ! -f /config/nginx/meet.conf ]]; then
            tpl /defaults/meet.conf > /config/nginx/meet.conf
        fi

        if [[ ! -f /config/nginx/ssl.conf ]]; then
            tpl /defaults/ssl.conf > /config/nginx/ssl.conf
        fi

        if [[ ! -f /config/nginx/site-confs/default ]]; then
            tpl /defaults/default > /config/nginx/site-confs/default
        fi

        tpl /defaults/config.js >> /config/config.js
        tpl /defaults/system-config.js >> /config/config.js
        tpl /defaults/settings-config.js >> /config/config.js
        if [[ -f /config/custom-config.js ]]; then
            cat /config/custom-config.js >> /config/config.js
        fi

        if [[ ! -f /config/interface_config.js ]]; then
            cp /defaults/interface_config.js /config/interface_config.js

            # It will remove parameter 'closedcaptions' from TOOLBAR_BUTTONS if ENABLE_TRANSCRIPTIONS is false,
            # because it enabled by default, but not supported out of the box.
            if [[ $ENABLE_TRANSCRIPTIONS -ne 1 && "$ENABLE_TRANSCRIPTIONS" != "true" ]]; then
                sed -i \
                    -e "s#'closedcaptions', ##" \
                    /config/interface_config.js
            fi
        fi
  # custom footer that references Schul Cloud imprint and data privacy protection
    welcomePageAdditionalContent.html: |
        <template id = "welcome-page-additional-content-template">
        <div id="footer">
        <center><a href="https://yourshard0domain.com">Your Site</a></center>
        </div>
        </template>

    plugin.head.html: |
        <style>
        .welcome .welcome-watermark{position:absolute;width:100%;height:auto}
        #footer{margin-top:20px;margin-bottom:20px;font-size:14px}
        </style>

    # source: https://github.com/jitsi/jitsi-meet/blob/master/interface_config.js
    # set DEFAULT_REMOTE_DISPLAY_NAME and DEFAULT_LOCAL_DISPLAY_NAME
    interface_config.js: |
        /* eslint-disable no-unused-vars, no-var, max-len */

        var interfaceConfig = {
            // TO FIX: this needs to be handled from SASS variables. There are some
            // methods allowing to use variables both in css and js.
            DEFAULT_BACKGROUND: '#4FC1F4',

            /**
            * Whether or not the blurred video background for large video should be
            * displayed on browsers that can support it.
            */
            DISABLE_VIDEO_BACKGROUND: false,

            INITIAL_TOOLBAR_TIMEOUT: 20000,
            TOOLBAR_TIMEOUT: 4000,
            TOOLBAR_ALWAYS_VISIBLE: false,
            DEFAULT_REMOTE_DISPLAY_NAME: 'Gast',
            DEFAULT_LOCAL_DISPLAY_NAME: 'Ich',
            SHOW_JITSI_WATERMARK: false,
            JITSI_WATERMARK_LINK: 'http://yourshard0domain.com',

            // if watermark is disabled by default, it can be shown only for guests
            SHOW_WATERMARK_FOR_GUESTS: false,
            SHOW_BRAND_WATERMARK: false,
            BRAND_WATERMARK_LINK: '',
            SHOW_POWERED_BY: false,
            SHOW_DEEP_LINKING_IMAGE: false,
            GENERATE_ROOMNAMES_ON_WELCOME_PAGE: true,
            DISPLAY_WELCOME_PAGE_CONTENT: true,
            DISPLAY_WELCOME_PAGE_TOOLBAR_ADDITIONAL_CONTENT: false,
            APP_NAME: 'Site Name',
            NATIVE_APP_NAME: 'Site Name',
            PROVIDER_NAME: 'TEAM',
            LANG_DETECTION: true, // Allow i18n to detect the system language
            INVITATION_POWERED_BY: true,

            /**
            * If we should show authentication block in profile
            */
            AUTHENTICATION_ENABLE: true,

            /**
            * The name of the toolbar buttons to display in the toolbar. If present,
            * the button will display. Exceptions are "livestreaming" and "recording"
            * which also require being a moderator and some values in config.js to be
            * enabled. Also, the "profile" button will not display for user's with a
            * jwt.
            */
            TOOLBAR_BUTTONS: [
                'microphone', 'camera', 'closedcaptions', 'desktop', 'fullscreen',
                'fodeviceselection', 'hangup', 'profile', 'info', 'chat',
                'etherpad', 'sharedvideo', 'settings', 'raisehand',
                'videoquality', 'filmstrip', 'feedback', 'stats',
                'tileview', 'download', 'mute-everyone'
            ],

            SETTINGS_SECTIONS: [ 'devices', 'language', 'moderator', 'profile', 'calendar' ],

            // Determines how the video would fit the screen. 'both' would fit the whole
            // screen, 'height' would fit the original video height to the height of the
            // screen, 'width' would fit the original video width to the width of the
            // screen respecting ratio.
            VIDEO_LAYOUT_FIT: 'both',

            /**
            * Whether to only show the filmstrip (and hide the toolbar).
            */
            filmStripOnly: false,

            /**
            * Whether to show thumbnails in filmstrip as a column instead of as a row.
            */
            VERTICAL_FILMSTRIP: true,

            // A html text to be shown to guests on the close page, false disables it
            CLOSE_PAGE_GUEST_HINT: false,
            SHOW_PROMOTIONAL_CLOSE_PAGE: false,
            RANDOM_AVATAR_URL_PREFIX: false,
            RANDOM_AVATAR_URL_SUFFIX: false,
            FILM_STRIP_MAX_HEIGHT: 120,

            // Enables feedback star animation.
            ENABLE_FEEDBACK_ANIMATION: false,
            DISABLE_FOCUS_INDICATOR: false,
            DISABLE_DOMINANT_SPEAKER_INDICATOR: false,

            /**
            * Whether the speech to text transcription subtitles panel is disabled.
            * If {@code undefined}, defaults to {@code false}.
            *
            * @type {boolean}
            */
            DISABLE_TRANSCRIPTION_SUBTITLES: false,

            /**
            * Whether the ringing sound in the call/ring overlay is disabled. If
            * {@code undefined}, defaults to {@code false}.
            *
            * @type {boolean}
            */
            DISABLE_RINGING: false,
            AUDIO_LEVEL_PRIMARY_COLOR: 'rgba(255,255,255,0.4)',
            AUDIO_LEVEL_SECONDARY_COLOR: 'rgba(255,255,255,0.2)',
            POLICY_LOGO: null,
            LOCAL_THUMBNAIL_RATIO: 16 / 9, // 16:9
            REMOTE_THUMBNAIL_RATIO: 1, // 1:1
            // Documentation reference for the live streaming feature.
            LIVE_STREAMING_HELP_LINK: 'http://yourshard0domain.com/',

            /**
            * Whether the mobile app Jitsi Meet is to be promoted to participants
            * attempting to join a conference in a mobile Web browser. If
            * {@code undefined}, defaults to {@code true}.
            *
            * @type {boolean}
            */
            MOBILE_APP_PROMO: false,

            /**
            * Maximum coeficient of the ratio of the large video to the visible area
            * after the large video is scaled to fit the window.
            *
            * @type {number}
            */
            MAXIMUM_ZOOMING_COEFFICIENT: 1.3,

            /*
            * If indicated some of the error dialogs may point to the support URL for
            * help.
            */
            SUPPORT_URL: 'http://yourshard0domain.com/',

            /**
            * Whether the connection indicator icon should hide itself based on
            * connection strength. If true, the connection indicator will remain
            * displayed while the participant has a weak connection and will hide
            * itself after the CONNECTION_INDICATOR_HIDE_TIMEOUT when the connection is
            * strong.
            *
            * @type {boolean}
            */
            CONNECTION_INDICATOR_AUTO_HIDE_ENABLED: true,

            /**
            * How long the connection indicator should remain displayed before hiding.
            * Used in conjunction with CONNECTION_INDICATOR_AUTOHIDE_ENABLED.
            *
            * @type {number}
            */
            CONNECTION_INDICATOR_AUTO_HIDE_TIMEOUT: 5000,

            /**
            * If true, hides the connection indicators completely.
            *
            * @type {boolean}
            */
            CONNECTION_INDICATOR_DISABLED: false,

            /**
            * If true, hides the video quality label indicating the resolution status
            * of the current large video.
            *
            * @type {boolean}
            */
            VIDEO_QUALITY_LABEL_DISABLED: false,

            /**
            * If true, will display recent list
            *
            * @type {boolean}
            */
            RECENT_LIST_ENABLED: true,

            // Names of browsers which should show a warning stating the current browser
            // has a suboptimal experience. Browsers which are not listed as optimal or
            // unsupported are considered suboptimal. Valid values are:
            // chrome, chromium, edge, electron, firefox, nwjs, opera, safari
            OPTIMAL_BROWSERS: ['safari', 'chrome', 'chromium', 'firefox', 'nwjs', 'electron' ],

            // Browsers, in addition to those which do not fully support WebRTC, that
            // are not supported and should show the unsupported browser page.
            UNSUPPORTED_BROWSERS: [],

            /**
            * A UX mode where the last screen share participant is automatically
            * pinned. Valid values are the string "remote-only" so remote participants
            * get pinned but not local, otherwise any truthy value for all participants,
            * and any falsy value to disable the feature.
            *
            * Note: this mode is experimental and subject to breakage.
            */
            AUTO_PIN_LATEST_SCREEN_SHARE: 'remote-only',

            /**
            * If true, presence status: busy, calling, connected etc. is not displayed.
            */
            DISABLE_PRESENCE_STATUS: false,

            /**
            * If true, notifications regarding joining/leaving are no longer displayed.
            */
            DISABLE_JOIN_LEAVE_NOTIFICATIONS: false,

            /**
            * Decides whether the chrome extension banner should be rendered on the landing page and during the meeting.
            * If this is set to false, the banner will not be rendered at all. If set to true, the check for extension(s)
            * being already installed is done before rendering.
            */
            SHOW_CHROME_EXTENSION_BANNER: false,

            /**
            * When enabled, the kick participant button will not be presented for users without a JWT
            */
            // HIDE_KICK_BUTTON_FOR_GUESTS: false

            /**
            * How many columns the tile view can expand to. The respected range is
            * between 1 and 5.
            */
            // TILE_VIEW_MAX_COLUMNS: 5,

            /**
            * Specify custom URL for downloading android mobile app.
            */
            MOBILE_DOWNLOAD_LINK_ANDROID: 'https://play.google.com/store/apps/details?id=',

            /**
            * Specify URL for downloading ios mobile app.
            */
            MOBILE_DOWNLOAD_LINK_IOS: 'https://apps.apple.com/us/app/',

            /**
            * Specify mobile app scheme for opening the app from the mobile browser.
            */
            // APP_SCHEME: 'org.jitsi.meet',

            /**
            * Specify the Android app package name.
            */
            // ANDROID_APP_PACKAGE: 'org.jitsi.meet',

            /**
            * Override the behavior of some notifications to remain displayed until
            * explicitly dismissed through a user action. The value is how long, in
            * milliseconds, those notifications should remain displayed.
            */
            // ENFORCE_NOTIFICATION_AUTO_DISMISS_TIMEOUT: 15000,

            // List of undocumented settings
            /**
            INDICATOR_FONT_SIZES
            MOBILE_DYNAMIC_LINK
            PHONE_NUMBER_REGEX
            */
        };
        /* eslint-enable no-unused-vars, no-var, max-len */
    config.js: |
        /* eslint-disable no-unused-vars, no-var */
        var config = {
            // Connection
            //

            hosts: {
                // XMPP domain.
                domain: 'jitsi-meet.example.com',

                // When using authentication, domain for guest users.
                // anonymousdomain: 'guest.example.com',

                // Domain for authenticated users. Defaults to <domain>.
                // authdomain: 'jitsi-meet.example.com',

                // Call control component (Jigasi).
                // call_control: 'callcontrol.jitsi-meet.example.com',

                // Focus component domain. Defaults to focus.<domain>.
                // focus: 'focus.jitsi-meet.example.com',

                // XMPP MUC domain. FIXME: use XEP-0030 to discover it.
                muc: 'conference.jitsi-meet.example.com'
            },

            // BOSH URL. FIXME: use XEP-0156 to discover it. << update this >>
            bosh: '//yourshard0domain.com/http-bind',

            // Websocket URL << update this >>
            websocket: 'wss://yourshard0domain.com/xmpp-websocket',

            // The name of client node advertised in XEP-0115 'c' stanza
            clientNode: 'http://jitsi.org/jitsimeet',

            // The real JID of focus participant - can be overridden here
            // Do not change username - FIXME: Make focus username configurable
            // https://github.com/jitsi/jitsi-meet/issues/7376
            // focusUserJid: 'focus@auth.jitsi-meet.example.com',


            // Testing / experimental features.
            //

            testing: {
                // Disables the End to End Encryption feature. Useful for debugging
                // issues related to insertable streams.
                // disableE2EE: false,

                // P2P test mode disables automatic switching to P2P when there are 2
                // participants in the conference.
                p2pTestMode: false,

                // Enables the test specific features consumed by jitsi-meet-torture
                // testMode: false

                // Disables the auto-play behavior of *all* newly created video element.
                // This is useful when the client runs on a host with limited resources.
                // noAutoPlayVideo: false

                // Enable / disable 500 Kbps bitrate cap on desktop tracks. When enabled,
                // simulcast is turned off for the desktop share. If presenter is turned
                // on while screensharing is in progress, the max bitrate is automatically
                // adjusted to 2.5 Mbps. This takes a value between 0 and 1 which determines
                // the probability for this to be enabled.
                // capScreenshareBitrate: 1 // 0 to disable

                // Enable callstats only for a percentage of users.
                // This takes a value between 0 and 100 which determines the probability for
                // the callstats to be enabled.
                // callStatsThreshold: 5 // enable callstats for 5% of the users.

                //enable Octo
                octo: {
                    probability: 1
                }
            },

            // Disables ICE/UDP by filtering out local and remote UDP candidates in
            // signalling.
            // webrtcIceUdpDisable: false,

            // Disables ICE/TCP by filtering out local and remote TCP candidates in
            // signalling.
            // webrtcIceTcpDisable: false,


            // Media
            //

            // Audio

            // Disable measuring of audio levels.
            disableAudioLevels: true,
            // audioLevelsInterval: 200,

            // Enabling this will run the lib-jitsi-meet no audio detection module which
            // will notify the user if the current selected microphone has no audio
            // input and will suggest another valid device if one is present.
            enableNoAudioDetection: true,

            // Enabling this will run the lib-jitsi-meet noise detection module which will
            // notify the user if there is noise, other than voice, coming from the current
            // selected microphone. The purpose it to let the user know that the input could
            // be potentially unpleasant for other meeting participants.
            enableNoisyMicDetection: true,

            // Start the conference in audio only mode (no video is being received nor
            // sent).
            // startAudioOnly: false,

            // Every participant after the Nth will start audio muted.
            // startAudioMuted: 10,

            // Start calls with audio muted. Unlike the option above, this one is only
            // applied locally. FIXME: having these 2 options is confusing.
            // startWithAudioMuted: false,

            // Enabling it (with #params) will disable local audio output of remote
            // participants and to enable it back a reload is needed.
            // startSilent: false

            // Sets the preferred target bitrate for the Opus audio codec by setting its
            // 'maxaveragebitrate' parameter. Currently not available in p2p mode.
            // Valid values are in the range 6000 to 510000
            // opusMaxAverageBitrate: 20000,

            // Enables redundancy for Opus
            // enableOpusRed: false

            // Video

            // Sets the preferred resolution (height) for local video. Defaults to 720.
            // resolution: 720,

            // How many participants while in the tile view mode, before the receiving video quality is reduced from HD to SD.
            // Use -1 to disable.
            // maxFullResolutionParticipants: 2,

            // w3c spec-compliant video constraints to use for video capture. Currently
            // used by browsers that return true from lib-jitsi-meet's
            // util#browser#usesNewGumFlow. The constraints are independent from
            // this config's resolution value. Defaults to requesting an ideal
            // resolution of 720p.
            // constraints: {
            //     video: {
            //         height: {
            //             ideal: 720,
            //             max: 720,
            //             min: 240
            //         }
            //     }
            // },

            // Enable / disable simulcast support.
            // disableSimulcast: false,

            // Enable / disable layer suspension.  If enabled, endpoints whose HD
            // layers are not in use will be suspended (no longer sent) until they
            // are requested again.
            // enableLayerSuspension: false,

            // Every participant after the Nth will start video muted.
            // startVideoMuted: 10,

            // Start calls with video muted. Unlike the option above, this one is only
            // applied locally. FIXME: having these 2 options is confusing.
            // startWithVideoMuted: false,

            // If set to true, prefer to use the H.264 video codec (if supported).
            // Note that it's not recommended to do this because simulcast is not
            // supported when  using H.264. For 1-to-1 calls this setting is enabled by
            // default and can be toggled in the p2p section.
            // This option has been deprecated, use preferredCodec under videoQuality section instead.
            // preferH264: true,

            // If set to true, disable H.264 video codec by stripping it out of the
            // SDP.
            // disableH264: false,

            // Desktop sharing

            // Optional desktop sharing frame rate options. Default value: min:5, max:5.
            // desktopSharingFrameRate: {
            //     min: 5,
            //     max: 5
            // },

            // Try to start calls with screen-sharing instead of camera video.
            // startScreenSharing: false,

            // Recording

            // Whether to enable file recording or not.
            // fileRecordingsEnabled: false,
            // Enable the dropbox integration.
            // dropbox: {
            //     appKey: '<APP_KEY>' // Specify your app key here.
            //     // A URL to redirect the user to, after authenticating
            //     // by default uses:
            //     // 'https://jitsi-meet.example.com/static/oauth.html'
            //     redirectURI:
            //          'https://jitsi-meet.example.com/subfolder/static/oauth.html'
            // },
            // When integrations like dropbox are enabled only that will be shown,
            // by enabling fileRecordingsServiceEnabled, we show both the integrations
            // and the generic recording service (its configuration and storage type
            // depends on jibri configuration)
            // fileRecordingsServiceEnabled: false,
            // Whether to show the possibility to share file recording with other people
            // (e.g. meeting participants), based on the actual implementation
            // on the backend.
            // fileRecordingsServiceSharingEnabled: false,

            // Whether to enable live streaming or not.
            // liveStreamingEnabled: false,

            // Transcription (in interface_config,
            // subtitles and buttons can be configured)
            // transcribingEnabled: false,

            // Enables automatic turning on captions when recording is started
            // autoCaptionOnRecord: false,

            // Misc

            // Default value for the channel "last N" attribute. -1 for unlimited.
            channelLastN: 15,

            // Provides a way to use different "last N" values based on the number of participants in the conference.
            // The keys in an Object represent number of participants and the values are "last N" to be used when number of
            // participants gets to or above the number.
            //
            // For the given example mapping, "last N" will be set to 20 as long as there are at least 5, but less than
            // 29 participants in the call and it will be lowered to 15 when the 30th participant joins. The 'channelLastN'
            // will be used as default until the first threshold is reached.
            //
            lastNLimits: {
                5: 20,
                30: 15,
                50: 10,
                70: 8,
                90: 5
            },

            // Specify the settings for video quality optimizations on the client.
            // videoQuality: {
            //    // Provides a way to prevent a video codec from being negotiated on the JVB connection. The codec specified
            //    // here will be removed from the list of codecs present in the SDP answer generated by the client. If the
            //    // same codec is specified for both the disabled and preferred option, the disable settings will prevail.
            //    // Note that 'VP8' cannot be disabled since it's a mandatory codec, the setting will be ignored in this case.
            //    disabledCodec: 'H264',
            //
            //    // Provides a way to set a preferred video codec for the JVB connection. If 'H264' is specified here,
            //    // simulcast will be automatically disabled since JVB doesn't support H264 simulcast yet. This will only
            //    // rearrange the the preference order of the codecs in the SDP answer generated by the browser only if the
            //    // preferred codec specified here is present. Please ensure that the JVB offers the specified codec for this
            //    // to take effect.
            //    preferredCodec: 'VP8',
            //
            //    // Provides a way to configure the maximum bitrates that will be enforced on the simulcast streams for
            //    // video tracks. The keys in the object represent the type of the stream (LD, SD or HD) and the values
            //    // are the max.bitrates to be set on that particular type of stream. The actual send may vary based on
            //    // the available bandwidth calculated by the browser, but it will be capped by the values specified here.
            //    // This is currently not implemented on app based clients on mobile.
            maxBitratesVideo: {
                low: 200000,
                standard: 500000,
                high: 800000
            },
            //
            //    // The options can be used to override default thresholds of video thumbnail heights corresponding to
            //    // the video quality levels used in the application. At the time of this writing the allowed levels are:
            //    //     'low' - for the low quality level (180p at the time of this writing)
            //    //     'standard' - for the medium quality level (360p)
            //    //     'high' - for the high quality level (720p)
            //    // The keys should be positive numbers which represent the minimal thumbnail height for the quality level.
            //    //
            //    // With the default config value below the application will use 'low' quality until the thumbnails are
            //    // at least 360 pixels tall. If the thumbnail height reaches 720 pixels then the application will switch to
            //    // the high quality.
            //    minHeightForQualityLvl: {
            //        360: 'standard,
            //        720: 'high'
            //    }
            // },

            // // Options for the recording limit notification.
            // recordingLimit: {
            //
            //    // The recording limit in minutes. Note: This number appears in the notification text
            //    // but doesn't enforce the actual recording time limit. This should be configured in
            //    // jibri!
            //    limit: 60,
            //
            //    // The name of the app with unlimited recordings.
            //    appName: 'Unlimited recordings APP',
            //
            //    // The URL of the app with unlimited recordings.
            //    appURL: 'https://unlimited.recordings.app.com/'
            // },

            // Disables or enables RTX (RFC 4588) (defaults to false).
            // disableRtx: false,

            // Disables or enables TCC (the default is in Jicofo and set to true)
            // (draft-holmer-rmcat-transport-wide-cc-extensions-01). This setting
            // affects congestion control, it practically enables send-side bandwidth
            // estimations.
            // enableTcc: true,

            // Disables or enables REMB (the default is in Jicofo and set to false)
            // (draft-alvestrand-rmcat-remb-03). This setting affects congestion
            // control, it practically enables recv-side bandwidth estimations. When
            // both TCC and REMB are enabled, TCC takes precedence. When both are
            // disabled, then bandwidth estimations are disabled.
            // enableRemb: false,

            // Enables ICE restart logic in LJM and displays the page reload overlay on
            // ICE failure. Current disabled by default because it's causing issues with
            // signaling when Octo is enabled. Also when we do an "ICE restart"(which is
            // not a real ICE restart), the client maintains the TCC sequence number
            // counter, but the bridge resets it. The bridge sends media packets with
            // TCC sequence numbers starting from 0.
            // enableIceRestart: false,

            // Defines the minimum number of participants to start a call (the default
            // is set in Jicofo and set to 2).
            // minParticipants: 2,

            // Use TURN/UDP servers for the jitsi-videobridge connection (by default
            // we filter out TURN/UDP because it is usually not needed since the
            // bridge itself is reachable via UDP)
            // useTurnUdp: false

            // Enables / disables a data communication channel with the Videobridge.
            // Values can be 'datachannel', 'websocket', true (treat it as
            // 'datachannel'), undefined (treat it as 'datachannel') and false (don't
            // open any channel).
            // openBridgeChannel: true,
            openBridgeChannel: 'websocket',


            // UI
            //

            // Hides lobby button
            // hideLobbyButton: false,

            // Require users to always specify a display name.
            // requireDisplayName: true,

            // Whether to use a welcome page or not. In case it's false a random room
            // will be joined when no room is specified.
            enableWelcomePage: false,

            // Enabling the close page will ignore the welcome page redirection when
            // a call is hangup.
            // enableClosePage: false,

            // Disable hiding of remote thumbnails when in a 1-on-1 conference call.
            // disable1On1Mode: false,

            // Default language for the user interface.
            // defaultLanguage: 'en',

            // If true all users without a token will be considered guests and all users
            // with token will be considered non-guests. Only guests will be allowed to
            // edit their profile.
            enableUserRolesBasedOnToken: false,

            // Whether or not some features are checked based on token.
            // enableFeaturesBasedOnToken: false,

            // Enable lock room for all moderators, even when userRolesBasedOnToken is enabled and participants are guests.
            // lockRoomGuestEnabled: false,

            // When enabled the password used for locking a room is restricted to up to the number of digits specified
            // roomPasswordNumberOfDigits: 10,
            // default: roomPasswordNumberOfDigits: false,

            // Message to show the users. Example: 'The service will be down for
            // maintenance at 01:00 AM GMT,
            // noticeMessage: '',

            // Enables calendar integration, depends on googleApiApplicationClientID
            // and microsoftApiApplicationClientID
            // enableCalendarIntegration: false,

            // When 'true', it shows an intermediate page before joining, where the user can configure their devices.
            // prejoinPageEnabled: false,

            // If true, shows the unsafe room name warning label when a room name is
            // deemed unsafe (due to the simplicity in the name) and a password is not
            // set or the lobby is not enabled.
            // enableInsecureRoomNameWarning: false,

            // Whether to automatically copy invitation URL after creating a room.
            // Document should be focused for this option to work
            // enableAutomaticUrlCopy: false,

            // Stats
            //

            // Whether to enable stats collection or not in the TraceablePeerConnection.
            // This can be useful for debugging purposes (post-processing/analysis of
            // the webrtc stats) as it is done in the jitsi-meet-torture bandwidth
            // estimation tests.
            // gatherStats: false,

            // The interval at which PeerConnection.getStats() is called. Defaults to 10000
            // pcStatsInterval: 10000,

            // To enable sending statistics to callstats.io you must provide the
            // Application ID and Secret.
            // callStatsID: '',
            // callStatsSecret: '',

            // Enables sending participants' display names to callstats
            // enableDisplayNameInStats: false,

            // Enables sending participants' emails (if available) to callstats and other analytics
            // enableEmailInStats: false,

            // Privacy
            //

            // If third party requests are disabled, no other server will be contacted.
            // This means avatars will be locally generated and callstats integration
            // will not function.
            // disableThirdPartyRequests: false,


            // Peer-To-Peer mode: used (if enabled) when there are just 2 participants.
            //

            p2p: {
                // Enables peer to peer mode. When enabled the system will try to
                // establish a direct connection when there are exactly 2 participants
                // in the room. If that succeeds the conference will stop sending data
                // through the JVB and use the peer to peer connection instead. When a
                // 3rd participant joins the conference will be moved back to the JVB
                // connection.
                enabled: true,

                // The STUN servers that will be used in the peer to peer connections
                stunServers: [

                    // { urls: 'stun:jitsi-meet.example.com:3478' },
                    { urls: 'stun:meet-jit-si-turnrelay.jitsi.net:443' }
                ]

                // Sets the ICE transport policy for the p2p connection. At the time
                // of this writing the list of possible values are 'all' and 'relay',
                // but that is subject to change in the future. The enum is defined in
                // the WebRTC standard:
                // https://www.w3.org/TR/webrtc/#rtcicetransportpolicy-enum.
                // If not set, the effective value is 'all'.
                // iceTransportPolicy: 'all',

                // If set to true, it will prefer to use H.264 for P2P calls (if H.264
                // is supported). This setting is deprecated, use preferredCodec instead.
                // preferH264: true

                // Provides a way to set the video codec preference on the p2p connection. Acceptable
                // codec values are 'VP8', 'VP9' and 'H264'.
                // preferredCodec: 'H264',

                // If set to true, disable H.264 video codec by stripping it out of the
                // SDP. This setting is deprecated, use disabledCodec instead.
                // disableH264: false,

                // Provides a way to prevent a video codec from being negotiated on the p2p connection.
                // disabledCodec: '',

                // How long we're going to wait, before going back to P2P after the 3rd
                // participant has left the conference (to filter out page reload).
                // backToP2PDelay: 5
            },

            analytics: {
                // The Google Analytics Tracking ID:
                // googleAnalyticsTrackingId: 'your-tracking-id-UA-123456-1'

                // Matomo configuration:
                // matomoEndpoint: 'https://your-matomo-endpoint/',
                // matomoSiteID: '42',

                // The Amplitude APP Key:
                // amplitudeAPPKey: '<APP_KEY>'

                // Configuration for the rtcstats server:
                // By enabling rtcstats server every time a conference is joined the rtcstats
                // module connects to the provided rtcstatsEndpoint and sends statistics regarding
                // PeerConnection states along with getStats metrics polled at the specified
                // interval.
                // rtcstatsEnabled: true,

                // In order to enable rtcstats one needs to provide a endpoint url.
                // rtcstatsEndpoint: wss://rtcstats-server-pilot.jitsi.net/,

                // The interval at which rtcstats will poll getStats, defaults to 1000ms.
                // If the value is set to 0 getStats won't be polled and the rtcstats client
                // will only send data related to RTCPeerConnection events.
                // rtcstatsPolIInterval: 1000

                // Array of script URLs to load as lib-jitsi-meet "analytics handlers".
                // scriptURLs: [
                //      "libs/analytics-ga.min.js", // google-analytics
                //      "https://example.com/my-custom-analytics.js"
                // ],
            },

            // Logs that should go be passed through the 'log' event if a handler is defined for it
            // apiLogLevels: ['warn', 'log', 'error', 'info', 'debug'],

            // Information about the jitsi-meet instance we are connecting to, including
            // the user region as seen by the server.
            deploymentInfo: {
                shard: "{{ .Env.SHARD_NAME }}",
                region: "{{ .Env.OCTO_REGION }}",
                userRegion: "{{ .Env.USER_REGION }}"
            },

            // Decides whether the start/stop recording audio notifications should play on record.
            // disableRecordAudioNotification: false,

            // Information for the chrome extension banner
            // chromeExtensionBanner: {
            //     // The chrome extension to be installed address
            //     url: 'https://chrome.google.com/webstore/detail/jitsi-meetings/kglhbbefdnlheedjiejgomgmfplipfeb',

            //     // Extensions info which allows checking if they are installed or not
            //     chromeExtensionsInfo: [
            //         {
            //             id: 'kglhbbefdnlheedjiejgomgmfplipfeb',
            //             path: 'jitsi-logo-48x48.png'
            //         }
            //     ]
            // },

            // Local Recording
            //

            // localRecording: {
            // Enables local recording.
            // Additionally, 'localrecording' (all lowercase) needs to be added to
            // TOOLBAR_BUTTONS in interface_config.js for the Local Recording
            // button to show up on the toolbar.
            //
            //     enabled: true,
            //

            // The recording format, can be one of 'ogg', 'flac' or 'wav'.
            //     format: 'flac'
            //

            // },

            // Options related to end-to-end (participant to participant) ping.
            // e2eping: {
            //   // The interval in milliseconds at which pings will be sent.
            //   // Defaults to 10000, set to <= 0 to disable.
            //   pingInterval: 10000,
            //
            //   // The interval in milliseconds at which analytics events
            //   // with the measured RTT will be sent. Defaults to 60000, set
            //   // to <= 0 to disable.
            //   analyticsInterval: 60000,
            //   },

            // If set, will attempt to use the provided video input device label when
            // triggering a screenshare, instead of proceeding through the normal flow
            // for obtaining a desktop stream.
            // NOTE: This option is experimental and is currently intended for internal
            // use only.
            // _desktopSharingSourceDevice: 'sample-id-or-label',

            // If true, any checks to handoff to another application will be prevented
            // and instead the app will continue to display in the current browser.
            disableDeepLinking: true,

            // A property to disable the right click context menu for localVideo
            // the menu has option to flip the locally seen video for local presentations
            // disableLocalVideoFlip: false,

            // Mainly privacy related settings

            // Disables all invite functions from the app (share, invite, dial out...etc)
            disableInviteFunctions: true,

            // Disables storing the room name to the recents list
            // doNotStoreRoom: true,

            // Deployment specific URLs.
            // deploymentUrls: {
            //    // If specified a 'Help' button will be displayed in the overflow menu with a link to the specified URL for
            //    // user documentation.
            //    userDocumentationURL: 'https://docs.example.com/video-meetings.html',
            //    // If specified a 'Download our apps' button will be displayed in the overflow menu with a link
            //    // to the specified URL for an app download page.
            //    downloadAppsUrl: 'https://docs.example.com/our-apps.html'
            // },

            // Options related to the remote participant menu.
            // remoteVideoMenu: {
            //     // If set to true the 'Kick out' button will be disabled.
            //     disableKick: true
            // },

            // If set to true all muting operations of remote participants will be disabled.
            // disableRemoteMute: true,

            /**
            External API url used to receive branding specific information.
            If there is no url set or there are missing fields, the defaults are applied.
            None of the fields are mandatory and the response must have the shape:
            {
                // The hex value for the colour used as background
                backgroundColor: '#fff',
                // The url for the image used as background
                backgroundImageUrl: 'https://example.com/background-img.png',
                // The anchor url used when clicking the logo image
                logoClickUrl: 'https://example-company.org',
                // The url used for the image used as logo
                logoImageUrl: 'https://example.com/logo-img.png'
            }
            */
            // brandingDataUrl: '',

            // The URL of the moderated rooms microservice, if available. If it
            // is present, a link to the service will be rendered on the welcome page,
            // otherwise the app doesn't render it.
            // moderatedRoomServiceUrl: 'https://moderated.jitsi-meet.example.com',

            // List of undocumented settings used in jitsi-meet
            /**
            _immediateReloadThreshold
            debug
            debugAudioLevels
            deploymentInfo
            dialInConfCodeUrl
            dialInNumbersUrl
            dialOutAuthUrl
            dialOutCodesUrl
            disableRemoteControl
            displayJids
            etherpad_base
            externalConnectUrl
            firefox_fake_device
            googleApiApplicationClientID
            iAmRecorder
            iAmSipGateway
            microsoftApiApplicationClientID
            peopleSearchQueryTypes
            peopleSearchUrl
            requireDisplayName
            tokenAuthUrl
            */

            /**
            * This property can be used to alter the generated meeting invite links (in combination with a branding domain
            * which is retrieved internally by jitsi meet) (e.g. https://meet.jit.si/someMeeting
            * can become https://brandedDomain/roomAlias)
            */
            // brandingRoomAlias: null,

            // List of undocumented settings used in lib-jitsi-meet
            /**
            _peerConnStatusOutOfLastNTimeout
            _peerConnStatusRtcMuteTimeout
            abTesting
            avgRtpStatsN
            callStatsConfIDNamespace
            callStatsCustomScriptUrl
            desktopSharingSources
            disableAEC
            disableAGC
            disableAP
            disableHPF
            disableNS
            enableLipSync
            enableTalkWhileMuted
            forceJVB121Ratio
            hiddenDomain
            ignoreStartMuted
            nick
            startBitrate
            */


            // Allow all above example options to include a trailing comma and
            // prevent fear when commenting out the last value.
            makeJsonParserHappy: 'even if last key had a trailing comma'

            // no configuration value should follow this line.
        };

        /* eslint-enable no-unused-vars, no-var */

        // Begin default config overrides.

        if (!config.hasOwnProperty('hosts')) config.hosts = {};

        config.hosts.domain = 'meet.jitsi';
        config.focusUserJid = 'focus@auth.meet.jitsi';

        config.hosts.muc = 'muc.meet.jitsi';
        config.bosh = '/http-bind';
        // Video configuration.
        //

        if (!config.hasOwnProperty('constraints')) config.constraints = {};
        if (!config.constraints.hasOwnProperty('video')) config.constraints.video = {};

        config.resolution = 720;
        config.constraints.video.height = { ideal: 720, max: 720, min: 180 };
        config.constraints.video.width = { ideal: 1280, max: 1280, min: 320};
        config.disableSimulcast = false;
        config.startVideoMuted = 10;

        // Audio configuration.
        //

        config.enableNoAudioDetection = false;
        config.enableTalkWhileMuted = false;
        config.disableAP = false;
        config.stereo = false;
        config.startAudioOnly = false;
        config.startAudioMuted = 10;


        // Peer-to-Peer options.
        //

        if (!config.hasOwnProperty('p2p')) config.p2p = {};

        config.p2p.enabled = true;


        // Etherpad
        //

        // Recording.
        //

        // Analytics.
        //

        if (!config.hasOwnProperty('analytics')) config.analytics = {};

        // Enables callstatsUsername to be reported as statsId and used
        // by callstats as repoted remote id.
        config.enableStatsID = false;


        // Dial in/out services.
        //

        // Calendar service integration.
        //

        config.enableCalendarIntegration = false;

        // Invitation service.
        //

        // Miscellaneous.
        //

        // Prejoin page.
        config.prejoinPageEnabled = false;

        // Require users to always specify a display name.
        config.requireDisplayName = false;

        // Chrome extension banner.
        // Advanced.
        //

        // Lipsync hack in jicofo, may not be safe.
        config.enableLipSync = false;

        config.enableRemb = true;
        config.enableTcc = true;

        config.openBridgeChannel = 'websocket';

        // Enable IPv6 support.
        config.useIPv6 = true;

        // Transcriptions (subtitles and buttons can be configured in interface_config)
        config.transcribingEnabled = false;

        // Deployment information.
        //

        if (!config.hasOwnProperty('deploymentInfo')) config.deploymentInfo = {};

        // Testing
        //

        if (!config.hasOwnProperty('testing')) config.testing = {};
        if (!config.testing.hasOwnProperty('octo')) config.testing.octo = {};

        config.testing.capScreenshareBitrate = 1;
        config.testing.octo.probability = 1;
    meet.conf: |
        {{ $ENABLE_XMPP_WEBSOCKET := .Env.ENABLE_XMPP_WEBSOCKET | default "1" | toBool }}

        server_name _;

        client_max_body_size 0;

        root /usr/share/jitsi-meet;

        # ssi on with javascript for multidomain variables in config.js
        ssi on;
        ssi_types application/x-javascript application/javascript;

        index index.html index.htm;
        error_page 404 /static/404.html;

        # Security headers
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";

        location = /config.js {
            alias /config/config.js;
        }

        location = /interface_config.js {
            alias /config/interface_config.js;
        }

        location = /external_api.js {
            alias /usr/share/jitsi-meet/libs/external_api.min.js;
        }

        # ensure all static content can always be found first
        location ~ ^/(libs|css|static|images|fonts|lang|sounds|connection_optimization|.well-known)/(.*)$
        {
            add_header 'Access-Control-Allow-Origin' '*';
            alias /usr/share/jitsi-meet/$1/$2;
        }

        # colibri (JVB) websockets
        location ~ ^/colibri-ws/([a-zA-Z0-9-\.\:]+)/(.*) {
            proxy_pass http://$1/colibri-ws/$1/$2$is_args$args;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            tcp_nodelay on;
        }

        # BOSH
        location = /http-bind {
            proxy_pass {{ .Env.XMPP_BOSH_URL_BASE }}/http-bind;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header Host meet.jitsi;
        }
        
        {{ if $ENABLE_XMPP_WEBSOCKET }}
        # xmpp websockets
        location = /xmpp-websocket {
            proxy_pass {{ .Env.XMPP_BOSH_URL_BASE }}/xmpp-websocket;
            proxy_http_version 1.1;

            proxy_set_header Connection "upgrade";
            proxy_set_header Upgrade $http_upgrade;

            proxy_set_header Host {{ .Env.XMPP_DOMAIN }};
            proxy_set_header X-Forwarded-For $remote_addr;
            tcp_nodelay on;
        }
        {{ end }}

        location ~ ^/([^/?&:'"]+)$ {
            try_files $uri @root_path;
        }

        location @root_path {
            rewrite ^/(.*)$ / break;
        }

    mod_token_moderation.lua: |
        -- Token moderation
        -- this module looks for a field on incoming JWT tokens called "moderator". 
        -- If it is true the user is added to the room as a moderator, otherwise they are set to a normal user.
        -- Note this may well break other affiliation based features like banning or login-based admins
        local jid = require "util.jid";
        local um_is_admin = require "core.usermanager".is_admin;
        local util = module:require "util";
        local log = module._log;
        local it = require "util.iterators";
        local jid_bare = require "util.jid".bare;
        local iterators = require "util.iterators";
        local json = require "cjson";
        local basexx = require "basexx";
        local array = require"util.array";
        local http = require "net.http";

        log('info', 'Loaded token moderation plugin');
        -- Hook into room creation to add this wrapper to every new room
        module:hook("muc-room-created", function(event)
                log('info', 'room created, adding token moderation code');
                local room = event.room;
                local _handle_normal_presence = room.handle_normal_presence;
                local _handle_first_presence = room.handle_first_presence;
                -- Wrap presence handlers to set affiliations from token whenever a user joins
                room.handle_normal_presence = function(thisRoom, origin, stanza)
                        local pres = _handle_normal_presence(thisRoom, origin, stanza);
                        setupAffiliation(thisRoom, origin, stanza);
                        return pres;
                end;
                room.handle_first_presence = function(thisRoom, origin, stanza)
                        local pres = _handle_first_presence(thisRoom, origin, stanza);
                        setupAffiliation(thisRoom, origin, stanza);
                        return pres;
                end;
                -- Wrap set affilaition to block anything but token setting owner (stop pesky auto-ownering)
                local _set_affiliation = room.set_affiliation;
                room.set_affiliation = function(room, actor, jid, affiliation, reason)
                        -- let this plugin do whatever it wants
                        if actor == "token_plugin" then
                                return _set_affiliation(room, true, jid, affiliation, reason)
                        -- noone else can assign owner (in order to block prosody/jisti's built in moderation functionality
                        elseif affiliation == "owner" then
                                return nil, "modify", "not-acceptable"
                        -- keep other affil stuff working as normal (hopefully, haven't needed to use/test any of it)
                        else
                                return _set_affiliation(room, actor, jid, affiliation, reason);
                        end;
                end;
        end);
        function setupAffiliation(room, origin, stanza)
                if origin.auth_token then
                        -- Extract token body and decode it
                        local dotFirst = origin.auth_token:find("%.");
                        if dotFirst then
                                local dotSecond = origin.auth_token:sub(dotFirst + 1):find("%.");
                                if dotSecond then
                                        local bodyB64 = origin.auth_token:sub(dotFirst + 1, dotFirst + dotSecond - 1);
                                        local body = json.decode(basexx.from_url64(bodyB64));
                                        -- If user is a moderator, set their affiliation to be an owner
                                        if body["moderator"] == true then
                                                room:set_affiliation("token_plugin", jid_bare(stanza.attr.from), "owner");
                                        else
                                                room:set_affiliation("token_plugin", jid_bare(stanza.attr.from), "member");
                                        end;
                    end;
                end;
            end;
        end;

        -- Room created
        module:hook("muc-occupant-joined", function(event)
            local room = event.room;
            log("info", "TEST OK joined");
            local room_member = array()
            for _, occupant in room:each_occupant() do
                if string.sub(occupant.nick,-string.len("/focus"))~="/focus" then
                    for _, pr in occupant:each_session() do
                        local nick = pr:get_child_text("nick", "http://jabber.org/protocol/nick") or "";
                        table.insert(room_member, tostring(nick))
                    end
                end
            end
            local body_json = {
                    ["room_members"] = room_member,
                    ["jid"] = room.jid,
                    ["type"] = "joined"
            };
            log("info", "total joined : %s", tostring(json.encode(body_json)));

        end);

        -- Room destroyed
        module:hook("muc-occupant-left", function(event)
            local room = event.room;
            log("info", "TEST OK left");
            local room_member = array()
            for _, occupant in room:each_occupant() do
                if string.sub(occupant.nick,-string.len("/focus"))~="/focus" then
                    for _, pr in occupant:each_session() do
                        local nick = pr:get_child_text("nick", "http://jabber.org/protocol/nick") or "";
                        table.insert(room_member, tostring(nick))
                    end
                end
            end
            local body_json = {
                ["room_members"] = room_member,
                ["jid"] = room.jid,
                ["type"] = "left"
            };
            log("info", "total left : %s", tostring(json.encode(body_json)));
        end);
    jitsi-meet.cfg.lua: |
        admins = {
        "{{ .Env.JICOFO_AUTH_USER }}@{{ .Env.XMPP_AUTH_DOMAIN }}",
        "{{ .Env.JVB_AUTH_USER }}@{{ .Env.XMPP_AUTH_DOMAIN }}"
            }

            cross_domain_websocket = true;
            consider_websocket_secure = true;

            plugin_paths = { "/prosody-plugins/", "/prosody-plugins-custom" }
            http_default_host = "{{ .Env.XMPP_DOMAIN }}"

            {{ $ENABLE_AUTH := .Env.ENABLE_AUTH | default "0" | toBool }}
            {{ $ENABLE_GUEST_DOMAIN := and $ENABLE_AUTH (.Env.ENABLE_GUESTS | default "0" | toBool)}}
            {{ $AUTH_TYPE := .Env.AUTH_TYPE | default "internal" }}
            {{ $JWT_ASAP_KEYSERVER := .Env.JWT_ASAP_KEYSERVER | default "" }}
            {{ $JWT_ALLOW_EMPTY := .Env.JWT_ALLOW_EMPTY | default "0" | toBool }}
            {{ $JWT_AUTH_TYPE := .Env.JWT_AUTH_TYPE | default "token" }}
            {{ $JWT_TOKEN_AUTH_MODULE := .Env.JWT_TOKEN_AUTH_MODULE | default "token_verification" }}
            {{ $ENABLE_LOBBY := .Env.ENABLE_LOBBY | default "0" | toBool }}

            {{ if and $ENABLE_AUTH (eq $AUTH_TYPE "jwt") .Env.JWT_ACCEPTED_ISSUERS }}
            asap_accepted_issuers = { "{{ join "\",\"" (splitList "," .Env.JWT_ACCEPTED_ISSUERS) }}" }
            {{ end }}

            {{ if and $ENABLE_AUTH (eq $AUTH_TYPE "jwt") .Env.JWT_ACCEPTED_AUDIENCES }}
            asap_accepted_audiences = { "{{ join "\",\"" (splitList "," .Env.JWT_ACCEPTED_AUDIENCES) }}" }
            {{ end }}

            VirtualHost "{{ .Env.XMPP_DOMAIN }}"
            {{ if $ENABLE_AUTH }}
            {{ if eq $AUTH_TYPE "jwt" }}
                authentication = "{{ $JWT_AUTH_TYPE }}"
                app_id = "{{ .Env.JWT_APP_ID }}"
                app_secret = "{{ .Env.JWT_APP_SECRET }}"
                allow_empty_token = {{ if $JWT_ALLOW_EMPTY }}true{{ else }}false{{ end }}
                {{ if $JWT_ASAP_KEYSERVER }}
                asap_key_server = "{{ .Env.JWT_ASAP_KEYSERVER }}"
                {{ end }}

                {{ else if eq $AUTH_TYPE "ldap" }}
                authentication = "cyrus"
                cyrus_application_name = "xmpp"
                allow_unencrypted_plain_auth = true
            {{ else if eq $AUTH_TYPE "internal" }}
                authentication = "internal_hashed"
            {{ end }}
            {{ else }}
                authentication = "anonymous"
            {{ end }}
                ssl = {
                    key = "/config/certs/{{ .Env.XMPP_DOMAIN }}.key";
                    certificate = "/config/certs/{{ .Env.XMPP_DOMAIN }}.crt";
                }
                modules_enabled = {
                    "bosh";
                    "pubsub";
                    "ping";
                    "websocket";
                    "smacks";
                    "speakerstats";
                    "conference_duration";
                    "token_moderation";
                    {{ if and $ENABLE_LOBBY (not $ENABLE_GUEST_DOMAIN) }}
                    "muc_lobby_rooms";
                    {{ end }}
                    {{ if .Env.XMPP_MODULES }}
                    "{{ join "\";\n\"" (splitList "," .Env.XMPP_MODULES) }}";
                    {{ end }}
                    {{ if and $ENABLE_AUTH (eq $AUTH_TYPE "ldap") }}
                    "auth_cyrus";
                    {{end}}
                }

                smacks_max_unacked_stanzas = 5;
                smacks_hibernation_time = 60; 
                smacks_max_hibernated_sessions = 1;
                smacks_max_old_sessions = 1;

                {{ if and $ENABLE_LOBBY (not $ENABLE_GUEST_DOMAIN) }}
                main_muc = "{{ .Env.XMPP_MUC_DOMAIN }}"
                lobby_muc = "lobby.{{ .Env.XMPP_DOMAIN }}"
                {{ if .Env.XMPP_RECORDER_DOMAIN }}
                muc_lobby_whitelist = { "{{ .Env.XMPP_RECORDER_DOMAIN }}" }
                {{ end }}
                {{ end }}

                speakerstats_component = "speakerstats.{{ .Env.XMPP_DOMAIN }}"
                conference_duration_component = "conferenceduration.{{ .Env.XMPP_DOMAIN }}"

                c2s_require_encryption = false

            {{ if $ENABLE_GUEST_DOMAIN }}
            VirtualHost "{{ .Env.XMPP_GUEST_DOMAIN }}"
                authentication = "anonymous"
                c2s_require_encryption = false

                {{ if $ENABLE_LOBBY }}
                modules_enabled = {
                    "muc_lobby_rooms";
                    "token_moderation";
                }

                main_muc = "{{ .Env.XMPP_MUC_DOMAIN }}"
                lobby_muc = "lobby.{{ .Env.XMPP_DOMAIN }}"
                {{ if .Env.XMPP_RECORDER_DOMAIN }}
                muc_lobby_whitelist = { "{{ .Env.XMPP_RECORDER_DOMAIN }}" }
                {{ end }}
                {{ end }}

            {{ end }}

            VirtualHost "{{ .Env.XMPP_AUTH_DOMAIN }}"
                ssl = {
                    key = "/config/certs/{{ .Env.XMPP_AUTH_DOMAIN }}.key";
                    certificate = "/config/certs/{{ .Env.XMPP_AUTH_DOMAIN }}.crt";
                }
                authentication = "internal_hashed"

            {{ if .Env.XMPP_RECORDER_DOMAIN }}
            VirtualHost "{{ .Env.XMPP_RECORDER_DOMAIN }}"
                modules_enabled = {
                "ping";
                "token_moderation";
                }
                authentication = "internal_hashed"
            {{ end }}

            Component "{{ .Env.XMPP_INTERNAL_MUC_DOMAIN }}" "muc"
                storage = "memory"
                modules_enabled = {
                    "ping";
                    "token_moderation";
                    {{ if .Env.XMPP_INTERNAL_MUC_MODULES }}
                    "{{ join "\";\n\"" (splitList "," .Env.XMPP_INTERNAL_MUC_MODULES) }}";
                    {{ end }}
                }
                muc_room_locking = false
                muc_room_default_public_jids = true

            Component "{{ .Env.XMPP_MUC_DOMAIN }}" "muc"
                storage = "memory"
                modules_enabled = {
                    "muc_meeting_id";
                    "token_moderation";
                    {{ if .Env.XMPP_MUC_MODULES }}
                    "{{ join "\";\n\"" (splitList "," .Env.XMPP_MUC_MODULES) }}";
                    {{ end }}
                    {{ if and $ENABLE_AUTH (eq $AUTH_TYPE "jwt") }}
                    "{{ $JWT_TOKEN_AUTH_MODULE }}";
                    {{ end }}
                }
                muc_room_cache_size = 1000
                muc_room_locking = false
                muc_room_default_public_jids = true

            Component "focus.{{ .Env.XMPP_DOMAIN }}"
                component_secret = "{{ .Env.JICOFO_COMPONENT_SECRET }}"

            Component "speakerstats.{{ .Env.XMPP_DOMAIN }}" "speakerstats_component"
                muc_component = "{{ .Env.XMPP_MUC_DOMAIN }}"

            Component "conferenceduration.{{ .Env.XMPP_DOMAIN }}" "conference_duration_component"
                muc_component = "{{ .Env.XMPP_MUC_DOMAIN }}"

            {{ if $ENABLE_LOBBY }}
            Component "lobby.{{ .Env.XMPP_DOMAIN }}" "muc"
                storage = "memory"
                restrict_room_creation = true
                muc_room_locking = false
                muc_room_default_public_jids = true
            {{ end }}



 